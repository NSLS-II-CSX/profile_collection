from ophyd import EpicsMotor, PVPositioner, PVPositionerPC, EpicsSignal, EpicsSignalRO, Device
from ophyd import Component as Cpt, FormattedComponent as FmtCpt


# Mirrors

class MirrorAxis(PVPositioner):
    setpoint = Cpt(EpicsSignal, 'Mtr_POS_SP')
    readback = Cpt(EpicsSignalRO, 'Mtr_MON')
    actuate = FmtCpt(EpicsSignal, '{self.parent.prefix}}}MOVE_CMD.PROC')
    actual_value = 1
    stop_signal = FmtCpt(EpicsSignal, '{self.parent.prefix}}}STOP_CMD.PROC')
    stop_value = 1
    done = FmtCpt(EpicsSignalRO, '{self.parent.prefix}}}BUSY_STS')
    done_value = 0


class Mirror(Device):
    z = Cpt(MirrorAxis, '-Ax:Z}')
    y = Cpt(MirrorAxis, '-Ax:Y}')
    x = Cpt(MirrorAxis, '-Ax:X}')
    pit = Cpt(MirrorAxis, '-Ax:Pit}')
    yaw = Cpt(MirrorAxis, '-Ax:Yaw}')
    rol = Cpt(MirrorAxis, '-Ax:Rol}')


class MotorMirror(Device):
    "a mirror with EpicsMotors, used for M3A"
    x = Cpt(EpicsMotor, '-Ax:XAvg}Mtr')
    pit = Cpt(EpicsMotor, '-Ax:P}Mtr')
    bdr = Cpt(EpicsMotor, '-Ax:Bdr}Mtr')



# VLS-PGM

class PGMEnergy(PVPositionerPC):
    setpoint = Cpt(EpicsSignal, '}Enrgy-SP', limits=(200,2200))  # IS THIS LIMITS USAGE CORRECT?
    readback = Cpt(EpicsSignalRO, '}Enrgy-I')
    stop_signal = Cpt(EpicsSignal, '}Cmd:Stop-Cmd')
    stop_value = 1


class PGM(Device):
    energy = Cpt(PGMEnergy, '')
    pit = Cpt(EpicsMotor, '-Ax:MirP}Mtr')
    x = Cpt(EpicsMotor, '-Ax:MirX}Mtr')
    grt_pit = Cpt(EpicsMotor, '-Ax:GrtP}Mtr')
    grt_x = Cpt(EpicsMotor, '-Ax:GrtX}Mtr')



# Slits

class SlitsGapCenter(Device):
    xg = Cpt(EpicsMotor, '-Ax:XGap}Mtr')
    xc = Cpt(EpicsMotor, '-Ax:XCtr}Mtr')
    yg = Cpt(EpicsMotor, '-Ax:YGap}Mtr')
    yc = Cpt(EpicsMotor, '-Ax:YCtr}Mtr')


class SlitsXY(Device):
    x = Cpt(EpicsMotor, '-Ax:X}Mtr', name='x')
    y = Cpt(EpicsMotor, '-Ax:Y}Mtr', name='y')



# Setpoint for PID loop

class PID(PVPositioner):
    setpoint = Cpt(EpicsSignal, '{FBck}PID-SP')
    readback = Cpt(EpicsSignalRO, '{FBck}PID-RB')
    actuate = Cpt(EpicsSignal, '{Mir:1B}MOVE_CMD.PROC')
    actual_value = 1
    stop_signal= Cpt(EpicsSignal, ':2{Mir:1B}STOP_CMD.PROC')
    stop_value = 1
    done = Cpt(EpicsSignalRO, ':2{Mir:1B}BUSY_STS')
    done_value = 0


# Sample position

class SamplePosVirtualMotor(PVPositionerPC):
    setpoint = Cpt(EpicsSignal, 'Pos-SP')
    readback = Cpt(EpicsSignalRO, 'Pos-RB')
    stop_signal = Cpt(EpicsSignal, 'Cmd:Stop-Cmd')
    stop_value = 1



# Nano-positioners



